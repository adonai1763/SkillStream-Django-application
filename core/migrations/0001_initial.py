# Generated by Django 5.2.1 on 2025-08-05 11:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_creator', models.BooleanField(default=False, help_text='True when user uploads their first video. Enables Creator Studio access.')),
                ('is_student', models.BooleanField(default=True, help_text='All users are students by default. Can subscribe to creators and comment.')),
                ('bio', models.TextField(blank=True, help_text='User biography displayed on profile page', max_length=500)),
                ('profile_image', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the user account was created', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the user account was last updated', null=True)),
                ('followers', models.ManyToManyField(blank=True, help_text='Users who follow this creator for updates', related_name='following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribed_at', models.DateTimeField(auto_now_add=True, help_text='When the subscription was created')),
                ('creator', models.ForeignKey(help_text='Creator being subscribed to', on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to=settings.AUTH_USER_MODEL)),
                ('subscriber', models.ForeignKey(help_text='User who is subscribing to the creator', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Channel Subscription',
                'verbose_name_plural': 'Channel Subscriptions',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, help_text='Video title - searchable field, minimum 3 characters', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title for SEO', max_length=250)),
                ('description', models.TextField(help_text='Video description - searchable field, minimum 10 characters', max_length=1000, validators=[django.core.validators.MinLengthValidator(10)])),
                ('video_file', models.FileField(help_text='Video file - supports MP4, WebM, OGG formats', upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'ogg'])])),
                ('thumbnail', models.ImageField(blank=True, help_text='Video thumbnail image - auto-generated if not provided', null=True, upload_to='thumbnails/')),
                ('duration', models.DurationField(blank=True, help_text='Video duration - auto-calculated on upload', null=True)),
                ('views', models.PositiveIntegerField(db_index=True, default=0, help_text='View counter - incremented each time video page is visited')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Automatically set when video is created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time video metadata was updated')),
                ('creator', models.ForeignKey(help_text='Video owner - automatically set to current user on upload', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, help_text='Users who liked this video - enables like/unlike functionality', related_name='liked_videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='subsciption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True, help_text='When user enrolled in this video')),
                ('completed', models.BooleanField(default=False, help_text='Whether user completed watching this video (future feature)')),
                ('learner', models.ForeignKey(help_text='User who enrolled in this specific video', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(help_text='Specific video the user enrolled in', on_delete=django.db.models.deletion.CASCADE, to='core.video')),
            ],
            options={
                'verbose_name': 'Video Subscription (Legacy)',
                'verbose_name_plural': 'Video Subscriptions (Legacy)',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment text content - limited to prevent spam', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When comment was posted')),
                ('user', models.ForeignKey(help_text='User who wrote this comment', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(help_text='Video this comment belongs to', on_delete=django.db.models.deletion.CASCADE, to='core.video')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customeruser',
            index=models.Index(fields=['is_creator'], name='core_custom_is_crea_5b9e6f_idx'),
        ),
        migrations.AddIndex(
            model_name='customeruser',
            index=models.Index(fields=['created_at'], name='core_custom_created_abdd06_idx'),
        ),
        migrations.AddIndex(
            model_name='customeruser',
            index=models.Index(fields=['username'], name='core_custom_usernam_02adfd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='channelsubscription',
            unique_together={('subscriber', 'creator')},
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['creator', '-uploaded_at'], name='core_video_creator_75bbc4_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['views'], name='core_video_views_f83955_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['uploaded_at'], name='core_video_uploade_8dcdb6_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['slug'], name='core_video_slug_5d634f_idx'),
        ),
    ]
